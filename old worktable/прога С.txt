#include <stdio.h>
#include <stdlib.h>

// Definition of a node in the singly linked list
struct Node {
    int data;
    struct Node* next;
};

// Function to swap values of two nodes in a singly linked list
void swapNodes(struct Node* head, int x, int y) {
    if (x == y) {
        // No need to swap if the values are the same
        return;
    }

    // Search for the nodes with values x and y
    struct Node *prevX = NULL, *currX = head;
    while (currX != NULL && currX->data != x) {
        prevX = currX;
        currX = currX->next;
    }

    struct Node *prevY = NULL, *currY = head;
    while (currY != NULL && currY->data != y) {
        prevY = currY;
        currY = currY->next;
    }

    // If either x or y is not present, no swapping can be done
    if (currX == NULL || currY == NULL) {
        printf("Values not found in the list\n");
        return;
    }

    // If x is not the head of the list, update the previous node's next pointer
    if (prevX != NULL) {
        prevX->next = currY;
    } else {
        // Update the head if x is the head
        head = currY;
    }

    // If y is not the head of the list, update the previous node's next pointer
    if (prevY != NULL) {
        prevY->next = currX;
    } else {
        // Update the head if y is the head
        head = currX;
    }

    // Swap the next pointers of the nodes
    struct Node* temp = currX->next;
    currX->next = currY->next;
    currY->next = temp;
}

// Function to print the linked list
void printList(struct Node* head) {
    while (head != NULL) {
        printf("%d ", head->data);
        head = head->next;
    }
    printf("\n");
}

// Function to insert a new node at the beginning of the linked list
void push(struct Node** headRef, int newData) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = newData;
    newNode->next = *headRef;
    *headRef = newNode;
}

int main() {
    // Example usage
    struct Node* head = NULL;

    // Insert elements at the beginning of the linked list
    push(&head, 3);
    push(&head, 2);
    push(&head, 1);

    printf("Original linked list: ");
    printList(head);

    // Swap values 2 and 3 in the linked list
    swapNodes(head, 2, 3);

    printf("Linked list after swapping 2 and 3: ");
    printList(head);

    return 0;
}